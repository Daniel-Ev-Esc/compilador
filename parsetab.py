
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programBRACKETDER BRACKETIZQ COMA COMILLAS CORCHETEDER CORCHETEIZQ CTE_FLOAT CTE_INT CTE_STRING DIV DO DOSPUNTOS ELSE END EXCLAMACION FLOAT ID IF IGUAL INT MAIN MAYORQUE MENORQUE MINUS MULT PARENDER PARENIZQ PLUS PRINT PROGRAM PUNTO PUNTOCOMA VAR VOID WHILEprogram : PROGRAM ID PUNTOCOMA vars_opt funcs_opt MAIN body ENDvars_opt : vars \n    | emptyvars : VAR vars_1vars_1 : id DOSPUNTOS type PUNTOCOMA vars_1\n    | emptyid : ID id_1id_1 : COMA id\n    | emptytype : INT\n    | FLOATfuncs_opt : funcs funcs_opt\n    | emptyfuncs : VOID ID PARENIZQ params PARENDER BRACKETIZQ vars_opt body BRACKETDER PUNTOCOMAparams : params_1\n    | emptyparams_1 : ID DOSPUNTOS type params_cycleparams_cycle : COMA params_1\n    | emptybody : CORCHETEIZQ statement_opt CORCHETEDERstatement_opt : statement statement_opt\n    | emptystatement : assign\n    | condition \n    | cycle\n    | f_call\n    | printassign : exp IGUAL expresion PUNTOCOMAcondition : IF PARENIZQ expresion PARENDER body else PUNTOCOMAelse : ELSE body\n    | emptycycle : DO body WHILE PARENIZQ expresion PARENDER PUNTOCOMAf_call : ID PARENIZQ expresion_opt PARENDER PUNTOCOMAprint : PRINT PARENIZQ printable PARENDER PUNTOCOMAprintable : CTE_STRING printable_1\n    | expresion printable_1printable_1 : COMA printable\n    | emptyexpresion_opt : expresion expresion_cycle\n    | emptyexpresion_cycle : COMA expresion_opt\n    | emptyexpresion : exp expresion_1expresion_1 : MENORQUE exp\n    | MAYORQUE exp\n    | EXCLAMACION IGUAL exp\n    | emptyexp : termino exp_1exp_1 : MINUS exp\n    | PLUS exp\n    | emptytermino : factor termino_1termino_1 : MULT termino\n    | DIV termino\n    | emptyfactor : PARENIZQ expresion PARENDER\n    | MINUS factor_1\n    | PLUS factor_1\n    | factor_1factor_1 : ID\n    | ctecte : CTE_INT\n    | CTE_FLOATempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,31,],[0,-1,]),'ID':([2,8,12,22,25,26,33,35,36,37,38,39,42,48,50,58,61,62,67,68,70,71,74,75,86,87,103,107,108,111,115,119,125,127,136,138,],[3,16,19,16,44,54,44,-23,-24,-25,-26,-27,65,65,65,16,65,65,65,65,65,65,65,65,65,65,-28,65,65,65,65,54,-33,-34,-29,-32,]),'PUNTOCOMA':([3,27,28,29,46,47,49,51,52,53,59,64,65,69,72,73,76,77,78,82,84,85,89,97,98,99,100,105,106,109,113,122,123,131,133,134,135,137,],[4,58,-10,-11,-64,-64,-59,-61,-62,-63,-20,-64,-60,-48,-51,-52,-55,-57,-58,103,-56,-43,-47,-49,-50,-53,-54,-44,-45,125,127,-64,-46,136,-31,138,139,-30,]),'VAR':([4,102,],[8,8,]),'VOID':([4,5,6,7,8,10,13,15,58,81,139,],[-64,12,-2,-3,-64,12,-4,-6,-64,-5,-14,]),'MAIN':([4,5,6,7,8,9,10,11,13,15,18,58,81,139,],[-64,-64,-2,-3,-64,17,-64,-13,-4,-6,-12,-64,-5,-14,]),'CORCHETEIZQ':([6,7,8,13,15,17,43,58,81,102,104,121,132,],[-2,-3,-64,-4,-6,25,25,-64,-5,-64,25,25,25,]),'DOSPUNTOS':([14,16,21,23,30,54,],[20,-64,-7,-9,-8,79,]),'COMA':([16,28,29,46,47,49,51,52,53,64,65,69,72,73,76,77,78,84,85,89,92,95,96,97,98,99,100,101,105,106,123,],[22,-10,-11,-64,-64,-59,-61,-62,-63,-64,-60,-48,-51,-52,-55,-57,-58,-56,-43,-47,111,115,115,-49,-50,-53,-54,119,-44,-45,-46,]),'PARENIZQ':([19,25,33,35,36,37,38,39,41,42,44,45,61,62,67,68,70,71,74,75,86,87,90,103,107,108,111,115,125,127,136,138,],[26,42,42,-23,-24,-25,-26,-27,62,42,67,68,42,42,42,42,42,42,42,42,42,42,108,-28,42,42,42,42,-33,-34,-29,-32,]),'INT':([20,79,],[28,28,]),'FLOAT':([20,79,],[29,29,]),'END':([24,59,],[31,-20,]),'CORCHETEDER':([25,32,33,34,35,36,37,38,39,60,103,125,127,136,138,],[-64,59,-64,-22,-23,-24,-25,-26,-27,-21,-28,-33,-34,-29,-32,]),'IF':([25,33,35,36,37,38,39,103,125,127,136,138,],[41,41,-23,-24,-25,-26,-27,-28,-33,-34,-29,-32,]),'DO':([25,33,35,36,37,38,39,103,125,127,136,138,],[43,43,-23,-24,-25,-26,-27,-28,-33,-34,-29,-32,]),'PRINT':([25,33,35,36,37,38,39,103,125,127,136,138,],[45,45,-23,-24,-25,-26,-27,-28,-33,-34,-29,-32,]),'MINUS':([25,33,35,36,37,38,39,42,44,46,47,49,51,52,53,61,62,65,67,68,70,71,73,74,75,76,77,78,84,86,87,99,100,103,107,108,111,115,125,127,136,138,],[48,48,-23,-24,-25,-26,-27,48,-60,70,-64,-59,-61,-62,-63,48,48,-60,48,48,48,48,-52,48,48,-55,-57,-58,-56,48,48,-53,-54,-28,48,48,48,48,-33,-34,-29,-32,]),'PLUS':([25,33,35,36,37,38,39,42,44,46,47,49,51,52,53,61,62,65,67,68,70,71,73,74,75,76,77,78,84,86,87,99,100,103,107,108,111,115,125,127,136,138,],[50,50,-23,-24,-25,-26,-27,50,-60,71,-64,-59,-61,-62,-63,50,50,-60,50,50,50,50,-52,50,50,-55,-57,-58,-56,50,50,-53,-54,-28,50,50,50,50,-33,-34,-29,-32,]),'CTE_INT':([25,33,35,36,37,38,39,42,48,50,61,62,67,68,70,71,74,75,86,87,103,107,108,111,115,125,127,136,138,],[52,52,-23,-24,-25,-26,-27,52,52,52,52,52,52,52,52,52,52,52,52,52,-28,52,52,52,52,-33,-34,-29,-32,]),'CTE_FLOAT':([25,33,35,36,37,38,39,42,48,50,61,62,67,68,70,71,74,75,86,87,103,107,108,111,115,125,127,136,138,],[53,53,-23,-24,-25,-26,-27,53,53,53,53,53,53,53,53,53,53,53,53,53,-28,53,53,53,53,-33,-34,-29,-32,]),'PARENDER':([26,28,29,46,47,49,51,52,53,55,56,57,63,64,65,67,69,72,73,76,77,78,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,105,106,110,111,112,114,116,117,118,120,123,124,126,128,129,],[-64,-10,-11,-64,-64,-59,-61,-62,-63,80,-15,-16,84,-64,-60,-64,-48,-51,-52,-55,-57,-58,104,-56,-43,-47,109,-64,-40,113,-64,-64,-49,-50,-53,-54,-64,-44,-45,-39,-64,-42,-35,-38,-36,-17,-19,-46,134,-41,-37,-18,]),'IGUAL':([40,44,46,47,49,51,52,53,65,69,72,73,76,77,78,84,88,97,98,99,100,],[61,-60,-64,-64,-59,-61,-62,-63,-60,-48,-51,-52,-55,-57,-58,-56,107,-49,-50,-53,-54,]),'MULT':([44,47,49,51,52,53,65,77,78,84,],[-60,74,-59,-61,-62,-63,-60,-57,-58,-56,]),'DIV':([44,47,49,51,52,53,65,77,78,84,],[-60,75,-59,-61,-62,-63,-60,-57,-58,-56,]),'MENORQUE':([46,47,49,51,52,53,64,65,69,72,73,76,77,78,84,97,98,99,100,],[-64,-64,-59,-61,-62,-63,86,-60,-48,-51,-52,-55,-57,-58,-56,-49,-50,-53,-54,]),'MAYORQUE':([46,47,49,51,52,53,64,65,69,72,73,76,77,78,84,97,98,99,100,],[-64,-64,-59,-61,-62,-63,87,-60,-48,-51,-52,-55,-57,-58,-56,-49,-50,-53,-54,]),'EXCLAMACION':([46,47,49,51,52,53,64,65,69,72,73,76,77,78,84,97,98,99,100,],[-64,-64,-59,-61,-62,-63,88,-60,-48,-51,-52,-55,-57,-58,-56,-49,-50,-53,-54,]),'WHILE':([59,66,],[-20,90,]),'ELSE':([59,122,],[-20,132,]),'BRACKETDER':([59,130,],[-20,135,]),'CTE_STRING':([68,115,],[95,95,]),'BRACKETIZQ':([80,],[102,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars_opt':([4,102,],[5,121,]),'vars':([4,102,],[6,6,]),'empty':([4,5,8,10,16,25,26,33,46,47,58,64,67,92,95,96,101,102,111,122,],[7,11,15,11,23,34,57,34,72,76,15,89,93,112,116,116,120,7,93,133,]),'funcs_opt':([5,10,],[9,18,]),'funcs':([5,10,],[10,10,]),'vars_1':([8,58,],[13,81,]),'id':([8,22,58,],[14,30,14,]),'id_1':([16,],[21,]),'body':([17,43,104,121,132,],[24,66,122,130,137,]),'type':([20,79,],[27,101,]),'statement_opt':([25,33,],[32,60,]),'statement':([25,33,],[33,33,]),'assign':([25,33,],[35,35,]),'condition':([25,33,],[36,36,]),'cycle':([25,33,],[37,37,]),'f_call':([25,33,],[38,38,]),'print':([25,33,],[39,39,]),'exp':([25,33,42,61,62,67,68,70,71,86,87,107,108,111,115,],[40,40,64,64,64,64,64,97,98,105,106,123,64,64,64,]),'termino':([25,33,42,61,62,67,68,70,71,74,75,86,87,107,108,111,115,],[46,46,46,46,46,46,46,46,46,99,100,46,46,46,46,46,46,]),'factor':([25,33,42,61,62,67,68,70,71,74,75,86,87,107,108,111,115,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'factor_1':([25,33,42,48,50,61,62,67,68,70,71,74,75,86,87,107,108,111,115,],[49,49,49,77,78,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'cte':([25,33,42,48,50,61,62,67,68,70,71,74,75,86,87,107,108,111,115,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'params':([26,],[55,]),'params_1':([26,119,],[56,129,]),'expresion':([42,61,62,67,68,108,111,115,],[63,82,83,92,96,124,92,96,]),'exp_1':([46,],[69,]),'termino_1':([47,],[73,]),'expresion_1':([64,],[85,]),'expresion_opt':([67,111,],[91,126,]),'printable':([68,115,],[94,128,]),'expresion_cycle':([92,],[110,]),'printable_1':([95,96,],[114,117,]),'params_cycle':([101,],[118,]),'else':([122,],[131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID PUNTOCOMA vars_opt funcs_opt MAIN body END','program',8,'p_program','parser_.py',6),
  ('vars_opt -> vars','vars_opt',1,'p_vars_opt','parser_.py',10),
  ('vars_opt -> empty','vars_opt',1,'p_vars_opt','parser_.py',11),
  ('vars -> VAR vars_1','vars',2,'p_vars','parser_.py',18),
  ('vars_1 -> id DOSPUNTOS type PUNTOCOMA vars_1','vars_1',5,'p_vars_1','parser_.py',22),
  ('vars_1 -> empty','vars_1',1,'p_vars_1','parser_.py',23),
  ('id -> ID id_1','id',2,'p_id','parser_.py',30),
  ('id_1 -> COMA id','id_1',2,'p_id_1','parser_.py',34),
  ('id_1 -> empty','id_1',1,'p_id_1','parser_.py',35),
  ('type -> INT','type',1,'p_type','parser_.py',42),
  ('type -> FLOAT','type',1,'p_type','parser_.py',43),
  ('funcs_opt -> funcs funcs_opt','funcs_opt',2,'p_funcs_opt','parser_.py',47),
  ('funcs_opt -> empty','funcs_opt',1,'p_funcs_opt','parser_.py',48),
  ('funcs -> VOID ID PARENIZQ params PARENDER BRACKETIZQ vars_opt body BRACKETDER PUNTOCOMA','funcs',10,'p_funcs','parser_.py',55),
  ('params -> params_1','params',1,'p_params','parser_.py',59),
  ('params -> empty','params',1,'p_params','parser_.py',60),
  ('params_1 -> ID DOSPUNTOS type params_cycle','params_1',4,'p_params_1','parser_.py',67),
  ('params_cycle -> COMA params_1','params_cycle',2,'p_params_cycle','parser_.py',71),
  ('params_cycle -> empty','params_cycle',1,'p_params_cycle','parser_.py',72),
  ('body -> CORCHETEIZQ statement_opt CORCHETEDER','body',3,'p_body','parser_.py',79),
  ('statement_opt -> statement statement_opt','statement_opt',2,'p_statement_opt','parser_.py',83),
  ('statement_opt -> empty','statement_opt',1,'p_statement_opt','parser_.py',84),
  ('statement -> assign','statement',1,'p_statement','parser_.py',90),
  ('statement -> condition','statement',1,'p_statement','parser_.py',91),
  ('statement -> cycle','statement',1,'p_statement','parser_.py',92),
  ('statement -> f_call','statement',1,'p_statement','parser_.py',93),
  ('statement -> print','statement',1,'p_statement','parser_.py',94),
  ('assign -> exp IGUAL expresion PUNTOCOMA','assign',4,'p_assign','parser_.py',98),
  ('condition -> IF PARENIZQ expresion PARENDER body else PUNTOCOMA','condition',7,'p_condition','parser_.py',102),
  ('else -> ELSE body','else',2,'p_else','parser_.py',106),
  ('else -> empty','else',1,'p_else','parser_.py',107),
  ('cycle -> DO body WHILE PARENIZQ expresion PARENDER PUNTOCOMA','cycle',7,'p_cycle','parser_.py',114),
  ('f_call -> ID PARENIZQ expresion_opt PARENDER PUNTOCOMA','f_call',5,'p_f_call','parser_.py',118),
  ('print -> PRINT PARENIZQ printable PARENDER PUNTOCOMA','print',5,'p_print','parser_.py',122),
  ('printable -> CTE_STRING printable_1','printable',2,'p_printable','parser_.py',126),
  ('printable -> expresion printable_1','printable',2,'p_printable','parser_.py',127),
  ('printable_1 -> COMA printable','printable_1',2,'p_printable_1','parser_.py',131),
  ('printable_1 -> empty','printable_1',1,'p_printable_1','parser_.py',132),
  ('expresion_opt -> expresion expresion_cycle','expresion_opt',2,'p_expresion_opt','parser_.py',139),
  ('expresion_opt -> empty','expresion_opt',1,'p_expresion_opt','parser_.py',140),
  ('expresion_cycle -> COMA expresion_opt','expresion_cycle',2,'p_expresion_cycle','parser_.py',147),
  ('expresion_cycle -> empty','expresion_cycle',1,'p_expresion_cycle','parser_.py',148),
  ('expresion -> exp expresion_1','expresion',2,'p_expresion','parser_.py',155),
  ('expresion_1 -> MENORQUE exp','expresion_1',2,'p_expresion_1','parser_.py',159),
  ('expresion_1 -> MAYORQUE exp','expresion_1',2,'p_expresion_1','parser_.py',160),
  ('expresion_1 -> EXCLAMACION IGUAL exp','expresion_1',3,'p_expresion_1','parser_.py',161),
  ('expresion_1 -> empty','expresion_1',1,'p_expresion_1','parser_.py',162),
  ('exp -> termino exp_1','exp',2,'p_exp','parser_.py',172),
  ('exp_1 -> MINUS exp','exp_1',2,'p_exp_1','parser_.py',176),
  ('exp_1 -> PLUS exp','exp_1',2,'p_exp_1','parser_.py',177),
  ('exp_1 -> empty','exp_1',1,'p_exp_1','parser_.py',178),
  ('termino -> factor termino_1','termino',2,'p_termino','parser_.py',185),
  ('termino_1 -> MULT termino','termino_1',2,'p_termino_1','parser_.py',189),
  ('termino_1 -> DIV termino','termino_1',2,'p_termino_1','parser_.py',190),
  ('termino_1 -> empty','termino_1',1,'p_termino_1','parser_.py',191),
  ('factor -> PARENIZQ expresion PARENDER','factor',3,'p_factor','parser_.py',198),
  ('factor -> MINUS factor_1','factor',2,'p_factor','parser_.py',199),
  ('factor -> PLUS factor_1','factor',2,'p_factor','parser_.py',200),
  ('factor -> factor_1','factor',1,'p_factor','parser_.py',201),
  ('factor_1 -> ID','factor_1',1,'p_factor_1','parser_.py',210),
  ('factor_1 -> cte','factor_1',1,'p_factor_1','parser_.py',211),
  ('cte -> CTE_INT','cte',1,'p_cte','parser_.py',215),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','parser_.py',216),
  ('empty -> <empty>','empty',0,'p_empty','parser_.py',220),
]
